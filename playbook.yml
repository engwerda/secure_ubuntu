---
- name: Initial Ubuntu Server Hardening
  hosts: all
  become: true

  pre_tasks:
    - name: Load default variables
      ansible.builtin.include_vars: vars/default.yml

    - name: Load local configuration if it exists
      ansible.builtin.include_vars: "{{ item }}"
      with_first_found:
        - files:
            - "{{ playbook_dir }}/vars/local.yml"
            - "{{ playbook_dir }}/vars/local.yaml"
          skip: true

  handlers:
    - name: restart ssh
      ansible.builtin.service:
        name: ssh
        state: restarted
      when: not ansible_check_mode

    - name: restart fail2ban
      ansible.builtin.service:
        name: fail2ban
        state: restarted
      when: not ansible_check_mode

    - name: restart auditd
      ansible.builtin.service:
        name: auditd
        state: restarted
      when: not ansible_check_mode

    - name: reload sysctl
      ansible.builtin.command: sysctl -p /etc/sysctl.d/99-security-hardening.conf
      changed_when: false
      when: not ansible_check_mode

  tasks:
    # System Updates
    - name: Update and upgrade system packages
      block:
        - name: Install aptitude
          ansible.builtin.apt:
            name: aptitude
            state: present
            update_cache: yes
            cache_valid_time: 3600

        - name: Upgrade all packages
          ansible.builtin.apt:
            upgrade: dist
            update_cache: yes
            cache_valid_time: 3600

    # User Management
    - name: Configure sudo and user access
      block:
        - name: Install sudo package
          ansible.builtin.package:
            name: sudo
            state: present

        - name: Ensure wheel group exists
          ansible.builtin.group:
            name: wheel
            state: present

        - name: Allow wheel group passwordless sudo
          ansible.builtin.lineinfile:
            path: /etc/sudoers
            state: present
            regexp: '^%wheel'
            line: '%wheel ALL=(ALL) NOPASSWD: ALL'
            validate: '/usr/sbin/visudo -cf %s'

        - name: Create secure user
          ansible.builtin.user:
            name: "{{ user }}"
            state: present
            groups: wheel
            append: true
            create_home: true
            shell: /bin/bash

        - name: Set authorized key for user
          ansible.posix.authorized_key:
            user: "{{ user }}"
            state: present
            key: "{{ local_key }}"
          when: not ansible_check_mode

        - name: Set secure permissions on user home
          ansible.builtin.file:
            path: "/home/{{ user }}"
            mode: '0750'
            owner: "{{ user }}"
            group: "{{ user }}"
          when: not ansible_check_mode

        - name: Create additional users
          ansible.builtin.user:
            name: "{{ item.name }}"
            state: present
            groups: wheel
            append: true
            create_home: true
            shell: /bin/bash
          loop: "{{ additional_users }}"
          when: additional_users is defined and additional_users | length > 0

        - name: Set authorized keys for additional users
          ansible.posix.authorized_key:
            user: "{{ item.name }}"
            state: present
            key: "{{ item.key }}"
          loop: "{{ additional_users }}"
          when:
            - additional_users is defined and additional_users | length > 0
            - not ansible_check_mode

        - name: Set secure permissions on additional user homes
          ansible.builtin.file:
            path: "/home/{{ item.name }}"
            mode: '0750'
            owner: "{{ item.name }}"
            group: "{{ item.name }}"
          loop: "{{ additional_users }}"
          when:
            - additional_users is defined and additional_users | length > 0
            - not ansible_check_mode

    # Kernel Hardening
    - name: Apply kernel security parameters
      block:
        - name: Deploy sysctl security configuration
          ansible.builtin.template:
            src: 99-security-hardening.conf.j2
            dest: /etc/sysctl.d/99-security-hardening.conf
            owner: root
            group: root
            mode: '0644'
          notify: reload sysctl

        - name: Apply sysctl settings immediately
          ansible.builtin.command: sysctl -p /etc/sysctl.d/99-security-hardening.conf
          changed_when: false

    # SSH Hardening
    - name: Secure SSH configuration
      block:
        - name: Generate SSH host keys if missing
          ansible.builtin.command: ssh-keygen -A
          args:
            creates: /etc/ssh/ssh_host_ed25519_key

        - name: Deploy secure SSH configuration
          ansible.builtin.template:
            src: sshd_config.j2
            dest: /etc/ssh/sshd_config
            owner: root
            group: root
            mode: '0600'
            validate: '/usr/sbin/sshd -t -f %s'
          notify: restart ssh

        - name: Deploy SSH banner
          ansible.builtin.template:
            src: issue.net.j2
            dest: /etc/issue.net
            owner: root
            group: root
            mode: '0644'

    # Firewall Configuration
    - name: Configure UFW firewall
      when: not (skip_docker_incompatible | default(false))
      block:
        - name: Install UFW
          ansible.builtin.apt:
            name: ufw
            state: present

        - name: Configure UFW defaults
          community.general.ufw:
            direction: "{{ item.direction }}"
            policy: "{{ item.policy }}"
          loop:
            - {direction: incoming, policy: deny}
            - {direction: outgoing, policy: allow}

        - name: Configure UFW rules
          community.general.ufw:
            rule: "{{ item.rule | default('allow') }}"
            port: "{{ item.port }}"
            proto: "{{ item.proto }}"
            comment: "{{ item.comment | default('') }}"
          loop: "{{ firewall_allowed_ports }}"

        - name: Add SSH rate limiting
          community.general.ufw:
            rule: limit
            port: "{{ ssh_port }}"
            proto: tcp
            comment: "SSH rate limiting"
          when: firewall_ssh_rate_limit

        - name: Enable UFW logging
          community.general.ufw:
            logging: 'on'

        - name: Enable UFW
          community.general.ufw:
            state: enabled

    # Security Tools Installation
    - name: Install security packages
      ansible.builtin.apt:
        name: "{{ security_packages }}"
        state: present
        update_cache: yes
        cache_valid_time: 3600

    # Auditd Configuration
    - name: Configure auditd
      block:
        - name: Deploy audit rules
          ansible.builtin.template:
            src: audit.rules.j2
            dest: /etc/audit/rules.d/hardening.rules
            owner: root
            group: root
            mode: '0600'
          notify: restart auditd
          when: enable_auditd

        - name: Enable and start auditd
          ansible.builtin.service:
            name: auditd
            enabled: yes
            state: started
          when:
            - enable_auditd
            - not (skip_docker_incompatible | default(false))

    # Fail2ban Configuration
    - name: Configure fail2ban
      when: not (skip_docker_incompatible | default(false))
      block:
        - name: Check if fail2ban is installed
          ansible.builtin.stat:
            path: /etc/fail2ban/jail.conf
          register: fail2ban_conf

        - name: Create fail2ban configuration
          ansible.builtin.copy:
            src: /etc/fail2ban/jail.conf
            dest: /etc/fail2ban/jail.local
            remote_src: yes
            force: no
            mode: '0644'
          notify: restart fail2ban
          when: fail2ban_conf.stat.exists

        - name: Configure fail2ban for SSH
          ansible.builtin.blockinfile:
            path: /etc/fail2ban/jail.local
            marker: "# {mark} ANSIBLE MANAGED SSH JAIL"
            block: |
              [sshd]
              enabled = true
              port = {{ ssh_port }}
              maxretry = {{ ssh_max_auth_tries }}
              bantime = 3600
              findtime = 600
          when: fail2ban_conf.stat.exists

        - name: Enable and start fail2ban
          ansible.builtin.service:
            name: fail2ban
            enabled: yes
            state: started
          when: not (skip_docker_incompatible | default(false))

    # Unattended Upgrades
    - name: Configure unattended upgrades
      block:
        - name: Install unattended-upgrades
          ansible.builtin.apt:
            name: unattended-upgrades
            state: present

        - name: Configure automatic updates
          ansible.builtin.copy:
            src: templates/10periodic
            dest: /etc/apt/apt.conf.d/10periodic
            owner: root
            group: root
            mode: '0644'

        - name: Check if unattended-upgrades config exists
          ansible.builtin.stat:
            path: /etc/apt/apt.conf.d/50unattended-upgrades
          register: unattended_upgrades_conf

        - name: Enable unattended upgrades
          ansible.builtin.lineinfile:
            path: /etc/apt/apt.conf.d/50unattended-upgrades
            regexp: '^//\s*"\${distro_id}:\${distro_codename}-security";'
            line: '        "${distro_id}:${distro_codename}-security";'
          when: unattended_upgrades_conf.stat.exists

    # AIDE Configuration
    - name: Configure AIDE
      when: not (skip_docker_incompatible | default(false))
      block:
        - name: Display AIDE initialization notice
          ansible.builtin.debug:
            msg: "AIDE is installed but database initialization is skipped. Run 'sudo aideinit' manually to initialize."
          when: enable_aide and not (initialize_aide | default(true))

        - name: Initialize AIDE database
          ansible.builtin.command: aideinit
          args:
            creates: /var/lib/aide/aide.db.new
          when: enable_aide and (initialize_aide | default(true))
          register: aide_init
          async: 3600  # Allow up to 1 hour
          poll: 30      # Check every 30 seconds

        - name: Move AIDE database
          ansible.builtin.command: mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db
          args:
            creates: /var/lib/aide/aide.db
          when: enable_aide and (initialize_aide | default(true))

    # Extra Packages
    - name: Install additional packages
      ansible.builtin.apt:
        name: "{{ extra_packages }}"
        state: present

    # System Limits
    - name: Configure system limits
      when: not (skip_docker_incompatible | default(false))
      community.general.pam_limits:
        domain: "{{ user }}"
        limit_type: "{{ item.limit_type }}"
        limit_item: "{{ item.limit_item }}"
        value: "{{ item.value }}"
      loop:
        - {limit_type: '-', limit_item: 'nofile', value: 65536}
        - {limit_type: '-', limit_item: 'nproc', value: 65536}
        - {limit_type: 'soft', limit_item: 'memlock', value: unlimited}
        - {limit_type: 'hard', limit_item: 'memlock', value: unlimited}

    # Final Security Steps
    - name: Apply final security configurations
      block:
        - name: Check if root has password
          ansible.builtin.shell: |
            set -o pipefail
            passwd -S root | grep -E '^root\s+P\s+'
          args:
            executable: /bin/bash
          register: root_password_status
          changed_when: false
          failed_when: false

        - name: Delete root password
          ansible.builtin.user:
            name: root
            password: '!'
          when: root_password_status.rc == 0

        - name: Check if SSH config exists
          ansible.builtin.stat:
            path: /etc/ssh/sshd_config
          register: ssh_config

        - name: Disable root SSH login
          ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            state: present
            regexp: '^#?PermitRootLogin'
            line: 'PermitRootLogin no'
          notify: restart ssh
          when: ssh_config.stat.exists

        - name: Disable password authentication
          ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: '^#?PasswordAuthentication'
            line: 'PasswordAuthentication no'
            state: present
          notify: restart ssh
          when: ssh_config.stat.exists

    # AppArmor
    - name: Ensure AppArmor is enabled
      ansible.builtin.service:
        name: apparmor
        enabled: yes
        state: started
      when: not (skip_docker_incompatible | default(false))

    # System Cleanup
    - name: Remove unnecessary packages
      ansible.builtin.apt:
        autoclean: yes
        autoremove: yes
